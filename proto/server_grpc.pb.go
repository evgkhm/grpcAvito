// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.0
// source: server.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Server_Create_FullMethodName        = "/grpcAvito.Server/Create"
	Server_Sum_FullMethodName           = "/grpcAvito.Server/Sum"
	Server_Reservation_FullMethodName   = "/grpcAvito.Server/Reservation"
	Server_Revenue_FullMethodName       = "/grpcAvito.Server/Revenue"
	Server_Dereservation_FullMethodName = "/grpcAvito.Server/Dereservation"
	Server_Report_FullMethodName        = "/grpcAvito.Server/Report"
)

// ServerClient is the client API for Server service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerClient interface {
	Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateReply, error)
	Sum(ctx context.Context, in *SumReq, opts ...grpc.CallOption) (*SumReply, error)
	Reservation(ctx context.Context, in *ReservationReq, opts ...grpc.CallOption) (*ReservationReply, error)
	Revenue(ctx context.Context, in *RevenueReq, opts ...grpc.CallOption) (*RevenueReply, error)
	Dereservation(ctx context.Context, in *DereservationReq, opts ...grpc.CallOption) (*DereservationReply, error)
	Report(ctx context.Context, in *ReportReq, opts ...grpc.CallOption) (*ReportReply, error)
}

type serverClient struct {
	cc grpc.ClientConnInterface
}

func NewServerClient(cc grpc.ClientConnInterface) ServerClient {
	return &serverClient{cc}
}

func (c *serverClient) Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateReply, error) {
	out := new(CreateReply)
	err := c.cc.Invoke(ctx, Server_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Sum(ctx context.Context, in *SumReq, opts ...grpc.CallOption) (*SumReply, error) {
	out := new(SumReply)
	err := c.cc.Invoke(ctx, Server_Sum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Reservation(ctx context.Context, in *ReservationReq, opts ...grpc.CallOption) (*ReservationReply, error) {
	out := new(ReservationReply)
	err := c.cc.Invoke(ctx, Server_Reservation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Revenue(ctx context.Context, in *RevenueReq, opts ...grpc.CallOption) (*RevenueReply, error) {
	out := new(RevenueReply)
	err := c.cc.Invoke(ctx, Server_Revenue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Dereservation(ctx context.Context, in *DereservationReq, opts ...grpc.CallOption) (*DereservationReply, error) {
	out := new(DereservationReply)
	err := c.cc.Invoke(ctx, Server_Dereservation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Report(ctx context.Context, in *ReportReq, opts ...grpc.CallOption) (*ReportReply, error) {
	out := new(ReportReply)
	err := c.cc.Invoke(ctx, Server_Report_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerServer is the server API for Server service.
// All implementations must embed UnimplementedServerServer
// for forward compatibility
type ServerServer interface {
	Create(context.Context, *CreateReq) (*CreateReply, error)
	Sum(context.Context, *SumReq) (*SumReply, error)
	Reservation(context.Context, *ReservationReq) (*ReservationReply, error)
	Revenue(context.Context, *RevenueReq) (*RevenueReply, error)
	Dereservation(context.Context, *DereservationReq) (*DereservationReply, error)
	Report(context.Context, *ReportReq) (*ReportReply, error)
	mustEmbedUnimplementedServerServer()
}

// UnimplementedServerServer must be embedded to have forward compatible implementations.
type UnimplementedServerServer struct {
}

func (UnimplementedServerServer) Create(context.Context, *CreateReq) (*CreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedServerServer) Sum(context.Context, *SumReq) (*SumReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sum not implemented")
}
func (UnimplementedServerServer) Reservation(context.Context, *ReservationReq) (*ReservationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reservation not implemented")
}
func (UnimplementedServerServer) Revenue(context.Context, *RevenueReq) (*RevenueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Revenue not implemented")
}
func (UnimplementedServerServer) Dereservation(context.Context, *DereservationReq) (*DereservationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dereservation not implemented")
}
func (UnimplementedServerServer) Report(context.Context, *ReportReq) (*ReportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Report not implemented")
}
func (UnimplementedServerServer) mustEmbedUnimplementedServerServer() {}

// UnsafeServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerServer will
// result in compilation errors.
type UnsafeServerServer interface {
	mustEmbedUnimplementedServerServer()
}

func RegisterServerServer(s grpc.ServiceRegistrar, srv ServerServer) {
	s.RegisterService(&Server_ServiceDesc, srv)
}

func _Server_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Server_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Create(ctx, req.(*CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Sum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Sum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Server_Sum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Sum(ctx, req.(*SumReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Reservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReservationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Reservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Server_Reservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Reservation(ctx, req.(*ReservationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Revenue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevenueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Revenue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Server_Revenue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Revenue(ctx, req.(*RevenueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Dereservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DereservationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Dereservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Server_Dereservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Dereservation(ctx, req.(*DereservationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Server_Report_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Report(ctx, req.(*ReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Server_ServiceDesc is the grpc.ServiceDesc for Server service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Server_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcAvito.Server",
	HandlerType: (*ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Server_Create_Handler,
		},
		{
			MethodName: "Sum",
			Handler:    _Server_Sum_Handler,
		},
		{
			MethodName: "Reservation",
			Handler:    _Server_Reservation_Handler,
		},
		{
			MethodName: "Revenue",
			Handler:    _Server_Revenue_Handler,
		},
		{
			MethodName: "Dereservation",
			Handler:    _Server_Dereservation_Handler,
		},
		{
			MethodName: "Report",
			Handler:    _Server_Report_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}

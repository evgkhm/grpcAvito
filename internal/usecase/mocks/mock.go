// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	entity "grpcAvito/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUser) CreateUser(ctx context.Context, userDTO *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, userDTO)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserMockRecorder) CreateUser(ctx, userDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUser)(nil).CreateUser), ctx, userDTO)
}

// GetBalance mocks base method.
func (m *MockUser) GetBalance(ctx context.Context, dto *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockUserMockRecorder) GetBalance(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockUser)(nil).GetBalance), ctx, dto)
}

// UserBalanceAccrual mocks base method.
func (m *MockUser) UserBalanceAccrual(ctx context.Context, userDTO *entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserBalanceAccrual", ctx, userDTO)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserBalanceAccrual indicates an expected call of UserBalanceAccrual.
func (mr *MockUserMockRecorder) UserBalanceAccrual(ctx, userDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserBalanceAccrual", reflect.TypeOf((*MockUser)(nil).UserBalanceAccrual), ctx, userDTO)
}

// MockOrder is a mock of Order interface.
type MockOrder struct {
	ctrl     *gomock.Controller
	recorder *MockOrderMockRecorder
}

// MockOrderMockRecorder is the mock recorder for MockOrder.
type MockOrderMockRecorder struct {
	mock *MockOrder
}

// NewMockOrder creates a new mock instance.
func NewMockOrder(ctrl *gomock.Controller) *MockOrder {
	mock := &MockOrder{ctrl: ctrl}
	mock.recorder = &MockOrderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrder) EXPECT() *MockOrderMockRecorder {
	return m.recorder
}

// UserOrderDeleteReservation mocks base method.
func (m *MockOrder) UserOrderDeleteReservation(ctx context.Context, reservation *entity.UserReservation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserOrderDeleteReservation", ctx, reservation)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserOrderDeleteReservation indicates an expected call of UserOrderDeleteReservation.
func (mr *MockOrderMockRecorder) UserOrderDeleteReservation(ctx, reservation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserOrderDeleteReservation", reflect.TypeOf((*MockOrder)(nil).UserOrderDeleteReservation), ctx, reservation)
}

// UserOrderReservation mocks base method.
func (m *MockOrder) UserOrderReservation(ctx context.Context, reservation *entity.UserReservation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserOrderReservation", ctx, reservation)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserOrderReservation indicates an expected call of UserOrderReservation.
func (mr *MockOrderMockRecorder) UserOrderReservation(ctx, reservation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserOrderReservation", reflect.TypeOf((*MockOrder)(nil).UserOrderReservation), ctx, reservation)
}

// UserOrderRevenue mocks base method.
func (m *MockOrder) UserOrderRevenue(ctx context.Context, revenue *entity.UserRevenue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserOrderRevenue", ctx, revenue)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserOrderRevenue indicates an expected call of UserOrderRevenue.
func (mr *MockOrderMockRecorder) UserOrderRevenue(ctx, revenue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserOrderRevenue", reflect.TypeOf((*MockOrder)(nil).UserOrderRevenue), ctx, revenue)
}

// MockReport is a mock of Report interface.
type MockReport struct {
	ctrl     *gomock.Controller
	recorder *MockReportMockRecorder
}

// MockReportMockRecorder is the mock recorder for MockReport.
type MockReportMockRecorder struct {
	mock *MockReport
}

// NewMockReport creates a new mock instance.
func NewMockReport(ctrl *gomock.Controller) *MockReport {
	mock := &MockReport{ctrl: ctrl}
	mock.recorder = &MockReportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReport) EXPECT() *MockReportMockRecorder {
	return m.recorder
}

// CreateMonthReport mocks base method.
func (m *MockReport) CreateMonthReport(ctx context.Context, year, month uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMonthReport", ctx, year, month)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMonthReport indicates an expected call of CreateMonthReport.
func (mr *MockReportMockRecorder) CreateMonthReport(ctx, year, month interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMonthReport", reflect.TypeOf((*MockReport)(nil).CreateMonthReport), ctx, year, month)
}

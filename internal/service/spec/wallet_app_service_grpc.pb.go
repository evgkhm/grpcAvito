// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.0
// source: wallet_app_service.proto

package spec

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WalletAppService_CreateUser_FullMethodName                 = "/grpcAvito.WalletAppService/CreateUser"
	WalletAppService_UserBalanceAccrual_FullMethodName         = "/grpcAvito.WalletAppService/UserBalanceAccrual"
	WalletAppService_UserOrderReservation_FullMethodName       = "/grpcAvito.WalletAppService/UserOrderReservation"
	WalletAppService_UserOrderRevenue_FullMethodName           = "/grpcAvito.WalletAppService/UserOrderRevenue"
	WalletAppService_UserOrderDeleteReservation_FullMethodName = "/grpcAvito.WalletAppService/UserOrderDeleteReservation"
	WalletAppService_CreateMonthReport_FullMethodName          = "/grpcAvito.WalletAppService/CreateMonthReport"
	WalletAppService_GetBalance_FullMethodName                 = "/grpcAvito.WalletAppService/GetBalance"
)

// WalletAppServiceClient is the client API for WalletAppService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletAppServiceClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserReply, error)
	UserBalanceAccrual(ctx context.Context, in *UserBalanceAccrualRequest, opts ...grpc.CallOption) (*UserBalanceAccrualReply, error)
	UserOrderReservation(ctx context.Context, in *UserOrderReservationRequest, opts ...grpc.CallOption) (*UserOrderReservationReply, error)
	UserOrderRevenue(ctx context.Context, in *UserOrderRevenueRequest, opts ...grpc.CallOption) (*UserOrderRevenueReply, error)
	UserOrderDeleteReservation(ctx context.Context, in *UserOrderDeleteReservationRequest, opts ...grpc.CallOption) (*UserOrderDeleteReservationReply, error)
	CreateMonthReport(ctx context.Context, in *CreateMonthReportRequest, opts ...grpc.CallOption) (*CreateMonthReportReply, error)
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceReply, error)
}

type walletAppServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletAppServiceClient(cc grpc.ClientConnInterface) WalletAppServiceClient {
	return &walletAppServiceClient{cc}
}

func (c *walletAppServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserReply, error) {
	out := new(CreateUserReply)
	err := c.cc.Invoke(ctx, WalletAppService_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAppServiceClient) UserBalanceAccrual(ctx context.Context, in *UserBalanceAccrualRequest, opts ...grpc.CallOption) (*UserBalanceAccrualReply, error) {
	out := new(UserBalanceAccrualReply)
	err := c.cc.Invoke(ctx, WalletAppService_UserBalanceAccrual_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAppServiceClient) UserOrderReservation(ctx context.Context, in *UserOrderReservationRequest, opts ...grpc.CallOption) (*UserOrderReservationReply, error) {
	out := new(UserOrderReservationReply)
	err := c.cc.Invoke(ctx, WalletAppService_UserOrderReservation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAppServiceClient) UserOrderRevenue(ctx context.Context, in *UserOrderRevenueRequest, opts ...grpc.CallOption) (*UserOrderRevenueReply, error) {
	out := new(UserOrderRevenueReply)
	err := c.cc.Invoke(ctx, WalletAppService_UserOrderRevenue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAppServiceClient) UserOrderDeleteReservation(ctx context.Context, in *UserOrderDeleteReservationRequest, opts ...grpc.CallOption) (*UserOrderDeleteReservationReply, error) {
	out := new(UserOrderDeleteReservationReply)
	err := c.cc.Invoke(ctx, WalletAppService_UserOrderDeleteReservation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAppServiceClient) CreateMonthReport(ctx context.Context, in *CreateMonthReportRequest, opts ...grpc.CallOption) (*CreateMonthReportReply, error) {
	out := new(CreateMonthReportReply)
	err := c.cc.Invoke(ctx, WalletAppService_CreateMonthReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletAppServiceClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceReply, error) {
	out := new(GetBalanceReply)
	err := c.cc.Invoke(ctx, WalletAppService_GetBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletAppServiceServer is the server API for WalletAppService service.
// All implementations must embed UnimplementedWalletAppServiceServer
// for forward compatibility
type WalletAppServiceServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserReply, error)
	UserBalanceAccrual(context.Context, *UserBalanceAccrualRequest) (*UserBalanceAccrualReply, error)
	UserOrderReservation(context.Context, *UserOrderReservationRequest) (*UserOrderReservationReply, error)
	UserOrderRevenue(context.Context, *UserOrderRevenueRequest) (*UserOrderRevenueReply, error)
	UserOrderDeleteReservation(context.Context, *UserOrderDeleteReservationRequest) (*UserOrderDeleteReservationReply, error)
	CreateMonthReport(context.Context, *CreateMonthReportRequest) (*CreateMonthReportReply, error)
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceReply, error)
	mustEmbedUnimplementedWalletAppServiceServer()
}

// UnimplementedWalletAppServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWalletAppServiceServer struct {
}

func (UnimplementedWalletAppServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedWalletAppServiceServer) UserBalanceAccrual(context.Context, *UserBalanceAccrualRequest) (*UserBalanceAccrualReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserBalanceAccrual not implemented")
}
func (UnimplementedWalletAppServiceServer) UserOrderReservation(context.Context, *UserOrderReservationRequest) (*UserOrderReservationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserOrderReservation not implemented")
}
func (UnimplementedWalletAppServiceServer) UserOrderRevenue(context.Context, *UserOrderRevenueRequest) (*UserOrderRevenueReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserOrderRevenue not implemented")
}
func (UnimplementedWalletAppServiceServer) UserOrderDeleteReservation(context.Context, *UserOrderDeleteReservationRequest) (*UserOrderDeleteReservationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserOrderDeleteReservation not implemented")
}
func (UnimplementedWalletAppServiceServer) CreateMonthReport(context.Context, *CreateMonthReportRequest) (*CreateMonthReportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMonthReport not implemented")
}
func (UnimplementedWalletAppServiceServer) GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedWalletAppServiceServer) mustEmbedUnimplementedWalletAppServiceServer() {}

// UnsafeWalletAppServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletAppServiceServer will
// result in compilation errors.
type UnsafeWalletAppServiceServer interface {
	mustEmbedUnimplementedWalletAppServiceServer()
}

func RegisterWalletAppServiceServer(s grpc.ServiceRegistrar, srv WalletAppServiceServer) {
	s.RegisterService(&WalletAppService_ServiceDesc, srv)
}

func _WalletAppService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAppServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAppService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAppServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAppService_UserBalanceAccrual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBalanceAccrualRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAppServiceServer).UserBalanceAccrual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAppService_UserBalanceAccrual_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAppServiceServer).UserBalanceAccrual(ctx, req.(*UserBalanceAccrualRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAppService_UserOrderReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOrderReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAppServiceServer).UserOrderReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAppService_UserOrderReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAppServiceServer).UserOrderReservation(ctx, req.(*UserOrderReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAppService_UserOrderRevenue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOrderRevenueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAppServiceServer).UserOrderRevenue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAppService_UserOrderRevenue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAppServiceServer).UserOrderRevenue(ctx, req.(*UserOrderRevenueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAppService_UserOrderDeleteReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserOrderDeleteReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAppServiceServer).UserOrderDeleteReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAppService_UserOrderDeleteReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAppServiceServer).UserOrderDeleteReservation(ctx, req.(*UserOrderDeleteReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAppService_CreateMonthReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMonthReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAppServiceServer).CreateMonthReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAppService_CreateMonthReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAppServiceServer).CreateMonthReport(ctx, req.(*CreateMonthReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletAppService_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletAppServiceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletAppService_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletAppServiceServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletAppService_ServiceDesc is the grpc.ServiceDesc for WalletAppService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletAppService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcAvito.WalletAppService",
	HandlerType: (*WalletAppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _WalletAppService_CreateUser_Handler,
		},
		{
			MethodName: "UserBalanceAccrual",
			Handler:    _WalletAppService_UserBalanceAccrual_Handler,
		},
		{
			MethodName: "UserOrderReservation",
			Handler:    _WalletAppService_UserOrderReservation_Handler,
		},
		{
			MethodName: "UserOrderRevenue",
			Handler:    _WalletAppService_UserOrderRevenue_Handler,
		},
		{
			MethodName: "UserOrderDeleteReservation",
			Handler:    _WalletAppService_UserOrderDeleteReservation_Handler,
		},
		{
			MethodName: "CreateMonthReport",
			Handler:    _WalletAppService_CreateMonthReport_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _WalletAppService_GetBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wallet_app_service.proto",
}
